[gd_resource type="Shader" format=3 uid="uid://bblivmnlqoq8b"]

[resource]
code = "shader_type canvas_item;
uniform int type = 0;
uniform sampler2D a0:hint_screen_texture,repeat_disable,filter_nearest;
//片元着色器

void fragment() {
	mat3 g=mat3(vec3(0.5,0.5,0.0),vec3(0.5,1.0,0.0),vec3(0.0,0.0,1.0));//甲型色盲（红色弱视）
	mat3 r=mat3(vec3(1.0,0.5,0.0),vec3(0.5,0.5,0.0),vec3(0.0,0.0,1.0));//乙型色盲（绿色弱视）
	mat3 b=mat3(vec3(1.0,0.0,0.5),vec3(0.0,1.0,0.5),vec3(0.0,0.0,0.5));//丙型色盲（蓝色弱视）
	//mat3 r=mat3(vec3(0.817,0.333,0.0),vec3(0.183,0.667,0.125),vec3(0.0,0.0,0.875));//甲型色盲（红色弱视）
	//mat3 g=mat3(vec3(0.8,0.258,0.0),vec3(0.2,0.742,0.142),vec3(0.0,0.0,0.858));//乙型色盲（绿色弱视）
	//mat3 b=mat3(vec3(0.967,0.0,0.0),vec3(0.033,0.733,0.0),vec3(0.0,0.267,1.0));//丙型色盲（蓝色弱视）
	switch(type){
		case 1:
			COLOR.rgb=r*texture(a0,SCREEN_UV).rgb;
			break;
		case 2:
			COLOR.rgb=g*texture(a0,SCREEN_UV).rgb;
			break;
		case 3:
			COLOR.rgb=b*texture(a0,SCREEN_UV).rgb;
			break;
		case 4:
			COLOR.rgb=1.0-texture(a0,SCREEN_UV).rgb;
			break;
		default:
			COLOR.rgb=texture(a0,SCREEN_UV).rgb;
			break;
	}
	// Called for every pixel the material is visible on.
}
"
